"""
Author: Kole Phillips

For each distribution JSON generated by individual_counts.py, plot the distribution
of that participant for every level of data resampling.

Usage: python visualize_dists.py INPUT_DIRECTORY
  INPUT_DIRECTORY: The directory in which the JSON files are stored. The same
  directory used as an output directory for individual_counts.py.
"""

import matplotlib.pyplot as plt
import numpy as np
from sys import argv
from collections import Counter, OrderedDict
from accel_profiling_working import fit_and_plot_activity
import os
import ast
from interact_tools import trim_10k


if __name__ == '__main__':
    if len(argv) < 2:
        print("Usage: python visualize_dists.py INPUT_DIRECTORY")
        exit()
    input_dir = argv[1]
    if not os.path.isdir(input_dir):
        print("Error: Argument '" + input_dir + "' is not a valid directory.")
        exit()
    # Start looking for function breakpoints near the physical activity breakpoints for light, moderate, and vigorous
    start_points = [100, 1951, 5725]
    point_bounds = [[20, 500], [1500, 2500], [4000, 7000]]

    if len(argv) > 2:
        binsize = int(argv[2])
    else:
        binsize = 100

    for fname in os.listdir(input_dir):
        # Plot every json in the given directory
        if '.json' not in fname:
            continue
        in_fname = input_dir + '/' + fname
        out_fname = in_fname[:-5] + '.png'
        with open(in_fname) as f:
            input_dict = ast.literal_eval(f.read())
            for label in ['counts_0', 'counts_1', 'counts_2', 'counts_4', 'counts_8']:
                # Remove unreasonably high values
                trimmed = trim_10k(input_dict[label])
                # Round values to the nearest bin size (default 100)
                binned = np.round(np.array(trimmed) / binsize) * binsize
                # Count the number of minutes in each bin
                data = OrderedDict(sorted(Counter(binned).items()))
                x = list(data.keys())
                y = list(data.values())
                # Plot the points and the resulting slopes of the distributions
                line_info = fit_and_plot_activity(x, y, point_bounds, start=start_points, silent_plot=True)
                for i in range(1, 4):
                    # place a vertical line on the graph at each breakpoint
                    plt.axvline(x=line_info[i])
                plt.savefig(in_fname[:-5] + '_' + label[-1] + '_ind-dist.png')
                plt.close()
